; Configuration for Special Services for use within Red Ink
; 
; You can let Red Ink help you create the template used for "Response" by within Word inserting your JSON sample string and your desired output (making reference to the fields in natural language), selecting all, then choosing "Freestyle" and entering "generateresponsekey" and press OK. Red Ink will try to provide you the template you need.


[DeepL Translate (Free)]

; Infos: https://www.deepl.com/en/pro#developer (kostenlose und bezahlte Abos)

APIKey = [APIKey]
APIKeyPrefix =
APIKeyEncrypted = False
Model = DeepL Translate
Endpoint = https://api-free.deepl.com/v2/translate
HeaderA = Authorization
HeaderB = DeepL-Auth-Key {apikey}
Response = text
APICall = {"text": ["{promptuser}"],"target_lang": "{parameter1}"}
Timeout = 200000
Parameter1 = Target Language; String; en-GB; en-GB, en-US, de, fr, it, es, ar, bg, cs, da, el, et, fi, he, hu, id, ja, ko, lt, lv, nb, nl, pl, pt-BR, pt-PT, ro, ru, sk, sl, sv, tr, uk, vi, zh-HANS, zh-HANT

[DUDEN Mentor Prüfung]

; Infos: https://www.duden.de/api (kostenlose und bezahlte Abos)

APIKey = [APIKey]
APIKeyPrefix =
APIKeyEncrypted = False
Model = DUDEN_Mentor
Endpoint = https://api.duden.de/v1/spellcheck
HeaderA = x-api-key
HeaderB = {apikey}
Response = **DUDEN Mentor Prüfung**\N{% for data.spellAdvices[*] %}\N{shortMessage}\N\NOriginal: {originalError}\NVorschlag: {proposals[*]|; }\N{% endfor %}
APICall = {"text":"{promptuser}","grantPermissions":["access punctuation correction","access filler words","access overlong sentences","access synonyms","access unfavorable phrases","access word frequency"]}
Timeout = 200000
MergePrompt = Integriere die vorgeschlagenen Korrekturen in meinen bestehenden Text; bei mehreren Wortvorschlägen verwende den besten.

[DUDEN Mentor nur Kommaprüfung]

; Infos: https://www.duden.de/api (kostenlose und bezahlte Abos)

APIKey = [APIKey]
APIKeyPrefix =
APIKeyEncrypted = False
Model = DUDEN_Mentor_Komma
Endpoint = https://api.duden.de/v1/spellcheck
HeaderA = x-api-key
HeaderB = {apikey}
Response = **DUDEN Mentor Kommaprüfung**\N{% for data.spellAdvices[?(@.errorCode=='901')] %}\N{shortMessage}\N\NOriginal: {originalError}\NVorschlag: {proposals[*]|; }\N{% endfor %}
APICall = {"text":"{promptuser}","grantPermissions":["access punctuation correction"]}
Timeout = 200000
MergePrompt = Integriere vorgeschlagenen Kommakorrekturen in meinen bestehenden Text.

[Lexi Search Entscheidsuche]

; Infos: https://www.lexisearch.ch/ (bezahlte Abos)

APIKey = [APIKey]
APIKeyPrefix =
APIKeyEncrypted = False
Model = Lexi Search
Endpoint = https://www.lexisearch.ch/api/v1/search
HeaderA = Authorization
HeaderB = Bearer {apikey}
Response = response
APICall = {"search": {"query": "{promptuser}", "filters": {"decision__law_field": "{parameter1}", "top_k": {parameter2}, "min_score": {parameter3}}}, "locale": "de"}
Timeout = 200000
Parameter1 = Rechtsgebiet; String; (all); (all), Zivilrecht<civil>, Strafrecht<criminal>, Öffentliches Recht<public>
Parameter2 = Max. Anzahl Entscheide (1-25); Integer; 5; 1-25
Parameter3 = Minimale Relevanz der Entscheide; Double; 0.55
MergePrompt = Integriere den selektierten Auszug aus einem Bundesgerichtsentscheid als Zitat so in meinen Text, dass es diesem als Beleg mit Quellenangabe dient, wie dies in einer juristischen Fachschrift passen würde

[Entscheidsuche.ch]

; Infos: https://entscheidsuche.ch (kostenlos, kein API-Key nötig)

APIKey = 
APIKeyPrefix =
APIKeyEncrypted = False
Model = Entscheidsuche.ch
Endpoint = https://entscheidsuche.ch/_search.php
HeaderA = 
HeaderB = 
Response = **Suchergebnisse [Entscheidsuche.ch](https://entscheidsuche.ch/):**\n\n{% for $.hits.hits[*] %}\n**[{_source.title.de}]({_source.attachment.content_url})**\n*{_source.date} – Score: {_score}*\n\n{_source.abstract.de}\n\n\n**Fundstellen** (max. 5): ...{nocr:highlight['attachment.content'][*]|...}\n\n\n{% endfor %}
APICall = {"query":{"query_string":{"query":"{promptuser}","default_field":"*","default_operator":"{parameter2}", "fuzziness": "{parameter3}"}},"highlight": {"pre_tags": ["**"],"post_tags": ["**"], "fields": {"attachment.content": {"fragment_size": {parameter4}, "number_of_fragments": 5}}},"from":0,"size":{parameter1}}
Timeout = 200000
Parameter1 = Maximale Anzahl Treffer (1-25); Integer; 10; 1-25
Parameter2 = Suchbegriffe; String; Alle müssen vorkommen; Einer muss vorkommen<OR>, Alle müssen vorkommen<AND>
Parameter3 = Fuzziness (erlaubte Abweichungen); String; Keine; Keine<0>, Wenig<1>, Viel<2>, Automatisch<AUTO>
Parameter4 = Anzahl Zeichen für Fundstellensnippets; Integer; 120; 50-250
MergePrompt = Integriere die Referenz auf die ausgewählten Gerichtsentscheide wie für eine wissenschaftliche Publikation

[ZEFIX Firmensuche]

; Infos: https://www.bj.admin.ch/bj/de/home/wirtschaft/handelsregister.html (kostenlos)

APIKey = [APIKey]
APIKeyPrefix =
APIKeyEncrypted = True
Model = ZEFIX
Endpoint = https://www.zefix.admin.ch/ZefixPublicREST/api/v1/company/search
HeaderA = Authorization
HeaderB = Basic {apikey}
Response = **[{name}](https://www.zefix.admin.ch/de/search/entity/list/firm/{ehraid})**\N{legalSeat}\N{legalForm.name.de}\NUID: {uid}\NStatus: {status}\NJüngste Publikation: {sogcDate}\NLöschdatum: {deletionDate}\n\n
APICall = {"name": "{promptuser}", "activeOnly": {parameter1}}
Timeout = 200000
Parameter1 = Nur aktive Firmen; Boolean; False

[LexFind.ch Erlasssuche]

; Infos: https://www.lexfind.ch/fe/de/info (kostenlose und bezahlte Abos; infos via info@lexfind.ch)

APIKey = 
APIKeyPrefix =
APIKeyEncrypted = False
Model = LexFind
Endpoint = https://www.lexfind.ch/api/fe/de/fulltext-search¦https://www.lexfind.ch/api/fe/de/fulltext-search/{id}?session_id={session_id}&page_no=1&results_per_page=25
HeaderA =
HeaderB =
Response = id;session_id¦[**Lexfind.ch ({results[*].number_of_results|/} Treffer)**](https://www.lexfind.ch/fe/de/search/{id}/{session_id}/de) (hier max. 25):\n\n{% for texts_of_law_with_matches %}[**{systematic_number} – {matches[0].title}**](https://www.lexfind.ch/fe/de{dta_urls[0].url})\n\n{matches[0].keywords}\nStatus: {matches[0].info_badge|removed=Entfernt;abrogated=Ausser Kraft;current=Aktuell;not_current=Nicht Aktuell} – {matches[0].version_active_since} – {dta_urls[0].language} – [{entity.name}]({dta_urls[0].original_url})\n\nFundstelle: {htmlnocr:matches[0].snippet}\n\n{% endfor %}
APICall = {"search_text":"{promptuser}","active_only":true,"search_in_systematic_number":{parameter3},"search_in_title":{parameter3},"search_in_keywords":{parameter4},"search_in_content":{parameter2},"entity_filter":{parameter1},"systematic_filter":[],"category_filter":[],"use_global_systematics":true,"direct_search":false}¦
Timeout = 200000
Parameter1 = Gemeinwesen; String; Bund (CH); Bund (CH)<[27]>, Bund und Kantone (alle)<[]>, Aargau (AG)<[1]>, Appenzell Ausserrhoden (AR)<[3]>, Appenzell Innerrhoden (AI)<[2]>, Basel-Landschaft (BL)<[5]>, Basel-Stadt (BS)<[6]>, Bern (BE)<[4]>, Freiburg (FR)<[7]>, Genf (GE)<[8]>, Glarus (GL)<[9]>, Graubünden (GR)<[10]>, Intlex (Intlex)<[28]>, Jura (JU)<[11]>, Luzern (LU)<[12]>, Neuenburg (NE)<[13]>, Nidwalden (NW)<[14]>, Obwalden (OW)<[15]>, Schaffhausen (SH)<[17]>, Schwyz (SZ)<[19]>, Solothurn (SO)<[18]>, St. Gallen (SG)<[16]>, Tessin (TI)<[21]>, Thurgau (TG)<[20]>, Uri (UR)<[22]>, Waadt (VD)<[23]>, Wallis (VS)<[24]>, Zug (ZG)<[25]>, Zürich (ZH)<[26]>
Parameter2 = Suche im Erlasstext; Boolean; True
Parameter3 = Suche im Titel/SR; Boolean; True
Parameter4 = Suche in Stichworten; Boolean; True

[Google-Suche (via SerpAPI)]

; Infos: https://serpapi.com/pricing (kostenlose und bezahlte Abos)

APIKey = [apikey]
APIKeyPrefix = 
APIKeyEncrypted =
Model = SerpAPI_Google_Search
Endpoint = GET:https://serpapi.com/search.json?engine=google&q={promptuser}&google_domain={parameter1}&hl={parameter2}&start=1&num={parameter3}&api_key={apikey}
APICall = {}
Response = # Search Results\n\n{% for organic_results %}\n[{source}]({displayed_link})\n**[{title}]({link})**\n{snippet}\n\n{% endfor %}
Timeout = 200000
Parameter1 = Suchmaschine; String; google.ch; google.ch, google.de, google.fr, google.com
Parameter2 = Sprache; String; Deutsch; Deutsch<de>, Französisch<fr>, Englisch<en>
Parameter3 = Anzahl Ergebnisse (1-30); Integer; 10; 1-30

